@page "/moderation"

<PageTitle>Text Moderation</PageTitle>

@using BlazorApp.Data
@using OpenAI.Net
@using OpenAI.Net.Models.Requests
@inject IOpenAIService _openAIService

<h3><b>Checking text moderation using OpenAI</b></h3>
<div>&nbsp;</div>
<EditForm Model="@moderateModel" OnValidSubmit="@ModerateText">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="usr"><b>Search Text:</b></label>
        <InputText class="form-control" id="name" @bind-Value="moderateModel.SearchText" />
    </div>
    <div>&nbsp;</div>

    <div class="form-group">
        <button type="submit" class="btn btn-success">Search</button>
    </div>
</EditForm>
<div>&nbsp;</div>
<table class="table">
    <thead>
        <tr>
            <th>Results</th>
        </tr>
    </thead>
    <tbody>
        
            <tr>
                <td>
                @result
                </td>
            </tr>
        
    </tbody>
</table>


@code {
    private Moderate moderateModel = new()
        {
          SearchText = "He will kill them"
        };
    private int loopCount = 0;
    public string result =string.Empty;

    private async Task ModerateText()
    {

        var request = new ModerationRequest(moderateModel.SearchText);

        var response = await _openAIService.Moderation.Create(request);
        if (response.IsSuccess)
        {
            var IsNotApproved = response.Result.Results[0].Flagged;
            if (IsNotApproved)
            {
                result = "Content is violated OpenAI community guidelines";
            }
            else{
                result = "Content is looks okay";
            }

            StateHasChanged();
        }

    }

}

